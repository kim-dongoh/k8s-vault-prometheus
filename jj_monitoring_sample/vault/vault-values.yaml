# Vault Helm Chart Value Overrides
global:
  enabled: true
  tlsDisable: true
server:
  enabled: true 
  image:
    repository: "hashicorp/vault-enterprise"
    tag: "latest"
    pullPolicy: IfNotPresent
  enterpriseLicense:
    secretName: vault-ent-license
  updateStrategyType: "OnDelete"
  resources:
    requests:
      memory: 1Gi
      cpu: 250m
    limits:
      memory: 2Gi
      cpu: 500m
  ingress:
    enabled: false
  authDelegator:
    enabled: true
  readinessProbe:
    enabled: false
    path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
    failureThreshold: 2
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  livenessProbe:
    enabled: false
    path: "/v1/sys/health?standbyok=true"
    failureThreshold: 2
    initialDelaySeconds: 60
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  preStopSleepSeconds: 5
  service:
    enabled: true
    port: 8200
    # Target port to which the service should be mapped to
    targetPort: 8200
    annotations: {}
  dataStorage:
    enabled: true
    size: 10Gi
    mountPath: "/vault/data"
    storageClass: vault-storage
    accessMode: ReadWriteOnce
    annotations: {}
  standalone:
    enabled: false
  # Run Vault in "HA" mode.
  ha:
    enabled: true
    replicas: 3
    raft:
      enabled: true
      setNodeId: true
      config: |
        ui = true
        listener "tcp" {
          telemetry {
            unauthenticated_metrics_access = "true"
          }
          tls_disable=true
          address = "[::]:8200"
          cluster_address = "[::]:8201"
        #  tls_cert_file = "/vault/userconfig/tls-server/server.crt"
        #  tls_key_file = "/vault/userconfig/tls-server/server.key"
        #  tls_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
        }
        storage "raft" {
          path = "/vault/data"
            retry_join {
            leader_api_addr = "http://vault-0.vault-internal:8200"
         #   leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
         #   leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
         #   leader_client_key_file = "/vault/userconfig/tls-server/server.key"
          }
          retry_join {
            leader_api_addr = "http://vault-1.vault-internal:8200"
         #  leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
         #   leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
         #   leader_client_key_file = "/vault/userconfig/tls-server/server.key"
          }
          retry_join {
            leader_api_addr = "http://vault-2.vault-internal:8200"
         #   leader_ca_cert_file = "/vault/userconfig/tls-ca/ca.crt"
         #   leader_client_cert_file = "/vault/userconfig/tls-server/server.crt"
         #   leader_client_key_file = "/vault/userconfig/tls-server/server.key"
          }
          autopilot {
            cleanup_dead_servers = "true"
            last_contact_threshold = "200ms"
            last_contact_failure_threshold = "10m"
            max_trailing_logs = 250000
            min_quorum = 5
            server_stabilization_time = "10s"
          }
        }
        telemetry {
            disable_hostname = true
            prometheus_retention_time = "12h"
          }
        service_registration "kubernetes" {}
    disruptionBudget:
      enabled: true	  
  serviceAccount:
    create: true
    name: "vault-sa"
    annotations: {}
# Vault UI
ui:
  enabled: true
  serviceType: "LoadBalancer"
  serviceNodePort: null
  externalPort: 8200

